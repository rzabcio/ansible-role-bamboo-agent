---
- name: Override vars for local agent
  set_fact:
    bamboo_agent_user: "{{ bamboo_master_user }}"
  when:
    bamboo_agent_remote == False

- name: Create .ssh folder
  file:
    name: "~{{ bamboo_agent_user }}/.ssh/"
    mode: 0700
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"
    state: directory

- name: Add bambooagent SSH private key
  template:
    src: id_rsa.j2
    dest: "~{{ bamboo_agent_user }}/.ssh/id_rsa"
    mode: 0600
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"
  when: devadmin_ssh_key is defined

- name: Add ssh client config file
  copy:
    src: ssh_config
    dest: "~{{ bamboo_agent_user }}/.ssh/config"
    mode: 0600
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"

- name: Add git config file
  copy:
    src: gitconfig
    dest: "~{{ bamboo_agent_user }}/.gitconfig"
    mode: 0600
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"

- name: create application folders
  file:
    name: "{{ item.extract_path }}"
    state: directory
  with_items:
    "{{ bamboo_agent_capabilities | default([]) }}"
  when: item.extract_path is defined

- name: install packages
  package:
    name: "{{ item.name }}"
    state: present
  with_items:
    "{{ bamboo_agent_capabilities | default([]) }}"
  when: (item.source is defined and item.source == "repository")

- name: download and extract local archives
  unarchive:
    src: "{{ item.name }}"
    dest: "{{ item.extract_path}}"
    keep_newer: yes
  with_items:
    "{{ bamboo_agent_capabilities | default([]) }}"
  when: (item.source is defined and item.source == "unarchive")

- name: download and extract remote archives
  unarchive:
    src: "{{ item.name }}"
    dest: "{{ item.extract_path }}"
    keep_newer: yes
    remote_src: True
  with_items:
    "{{ bamboo_agent_capabilities | default([]) }}"
  when: (item.source is defined and item.source == "unarchive-remote")

- name: create symlinks for applications
  file:
    src: "{{ item.1.src }}"
    path: "{{ item.1.dest }}"
    state: link
  with_subelements:
    - "{{ bamboo_agent_capabilities | default([]) }}"
    - symlinks

- name: Populate PATH environment variable
  template:
    src: bambooagent.sh.j2
    dest: /etc/profile.d/bambooagent.sh

- name: install npm packages
  npm:
    name: "{{ item.name }}"
    global: yes
    state: present
  with_items:
    "{{ bamboo_agent_capabilities | default([]) }}"
  when: (item.source is defined and item.source == "npm")

- name: Create maven home folder
  file:
    name: "~{{ bamboo_agent_user }}/.m2"
    state: directory
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"
  when: bamboo_agent_maven_settings is defined

- name: Define settings for maven
  template:
    src: settings.xml.j2
    dest: "~{{ bamboo_agent_user }}/.m2/settings.xml"
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"
  when: bamboo_agent_maven_settings is defined

- name: Set npmrc
  template:
    src: npmrc.j2
    dest: "~{{ bamboo_agent_user }}/.npmrc"
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"
  when: bamboo_agent_npmrc is defined

- name: Add docker group
  group:
    name: docker
    state: present

- name: Ensure bamboo agent user is member of docker
  command: "usermod -a -G docker {{ bamboo_agent_user }}"
  changed_when: False

- name: Configure ansible
  copy:
    src: ansible.cfg
    dest: "~{{ bamboo_agent_user }}/.ansible.cfg"
    owner: "{{ bamboo_agent_user }}"
    group: "{{ bamboo_agent_user }}"

- name: Store root CA locally
  blockinfile:
    path: /opt/rootca.crt
    block: "{{ root_ca }}"
    create: yes
  when: root_ca is defined

- name: Add root CA to java keystores
  java_cert:
    cert_alias: custom-root-ca
    cert_path: /opt/rootca.crt
    keystore_pass: changeit
    keystore_path: "{{ item.extract_path }}/{{ item.cacert_path }}"
  changed_when: false
  when: item.cacert_path is defined and root_ca is defined
  with_items: "{{ bamboo_agent_capabilities }}"
